% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/03_0_flow_view.R, R/04_0_flow_run.R
\name{flow_view}
\alias{flow_view}
\alias{flow_run}
\title{View function as flow chart}
\usage{
flow_view(
  x,
  prefix = NULL,
  truncate = NULL,
  nested_fun = NULL,
  swap = TRUE,
  narrow = FALSE,
  code = TRUE,
  out = NULL,
  engine = c("nomnoml", "plantuml"),
  engine_opts = getOption("flow.engine_opts")
)

flow_run(
  x,
  prefix = NULL,
  truncate = NULL,
  swap = TRUE,
  code = TRUE,
  out = NULL,
  browse = FALSE,
  show_passes = FALSE,
  engine_opts = getOption("flow.engine_opts")
)
}
\arguments{
\item{x}{A call, a function, or a path to a script}

\item{prefix}{prefix to use for special comments in our code used as block headers,
must start with \code{"#"}, several prefixes can be provided}

\item{truncate}{maximum number of characters to be printed per line}

\item{nested_fun}{if not NULL, the index or name of the function definition found in
x that we wish to inspect}

\item{swap}{whether to change \code{var <- if(cond) expr} into
\code{if(cond) var <- expr} so the diagram displays better}

\item{narrow}{\code{TRUE} makes sure the diagram stays centered on one column
(they'll be longer but won't shift to the right)}

\item{code}{Whether to display the code in code blocks or only the header, to be
more compact, if \code{NA}, the code will be displayed only if no header is
defined by special comments.}

\item{out}{a path to save the diagram to.
Special values "html", "htm", "png", "pdf", "jpg" and "jpeg" can be used to
export the objec to a temp file of the relevant format and open it,
if a regular path is used the format will be guessed from the extension.}

\item{engine}{Either \code{"nomnoml"} (default) or \code{"plantuml"} (experimental), if
the latter, arguments \code{prefix}, \code{narrow}, and \code{code}}

\item{engine_opts}{A named list.

In the most general case \code{engine_opts} is a list containing optional sub-lists named
\code{"nomnoml"}, \code{"plantuml"}, and \code{"htmlwidgets"}.
\itemize{
\item The items of the \code{nomnoml}
sub-list will be forwarded to \code{nomnoml:::build_nomnoml_code()}, unexported but
documented in \code{?build_nomnoml_code}, in order to alter
\emph{nomnoml} diagrams. For instance \code{fontSize}, \code{direction = "right"} to have a left to right
diagram, \code{ranker = "longest-path"} to see have exit points at the bottom...
\item The items of the \code{plantuml} sub-list will be forwarded to \code{plantuml:::plot.plantuml()},
, in order to alter  \emph{plantuml} diagrams.
see \code{?plantuml:::plot.plantuml} and \code{?plantuml::plantuml_run}
\item The items of the \code{htmlwidgets} sub-list will be forwarded to
\code{htmlwidgets::createWidget()} or \code{htmlwidgets::saveWidget()}, which are used by
the \emph{nomnoml} engine.
}

If this structure is not found, the items of \code{engine_opts} will be forwarded
to \code{nomnoml:::build_nomnoml_code()} if the engine is \code{"nomnoml"}, and
\code{plantuml:::plot.plantuml} if the engine is \code{"plantuml"}}

\item{browse}{whether to debug step by step (block by block),
can also be a vector of block ids, in this case \code{browser()} calls will be
inserted at the start of these blocks}

\item{show_passes}{label the edges with the number of passes}
}
\description{
\code{flow_view()} shows the code of a function as a flow diagram, \code{flow_run()}
runs a call and draws the logical path taken by the code.
}
